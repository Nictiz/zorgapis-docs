{
	"info": {
		"_postman_id": "c22bf5f5-a2ec-40df-86a2-7817de5c7203",
		"name": "ZorgAPIs API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32862395",
		"_collection_link": "https://www.postman.com/zorgapis/zorgapis/collection/6oerml3/zorgapis-api?action=share&source=collection_link&creator=32862395"
	},
	"item": [
		{
			"name": "Getting started",
			"item": [
				{
					"name": "Add your organization",
					"item": [
						{
							"name": "1. Add organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"organizationId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Nictiz\", \r\n  \"description\": \"Nictiz is the Dutch competence center for electronic exchange of health and care information.\",\r\n  \"website\": \"https://nictiz.nl/\",\r\n  \"githubUrl\": \"https://github.com/Nictiz\", \r\n  \"emailAddress\": \"info@nictiz.nl\",\r\n  \"phoneNumber\": \"+31 (0)70 317 3450\",\r\n  \"address\": {\r\n    \"street\": \"Oude Middenweg\",\r\n    \"houseNumber\": 55, \r\n    \"addressLine2\": \"Office building Palazzo Giardino\",\r\n    \"postalCode\": \"2491 AC\",\r\n    \"city\": \"The Hague\",\r\n    \"stateOrRegion\": \"South Holland\",\r\n    \"country\": \"NL\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/organizations",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"organizations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add your API specification",
					"item": [
						{
							"name": "1. Add API specification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"apiSpecificationId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Verzamelen Huisartsgegevens\",\r\n  \"description\": \"Het verzamelen van huisartsgegevens: je medische dossier bij je huisarts.\",\r\n  \"organizationId\": \"{{organizationId}}\",\r\n  \"architecturalStyle\": \"REST\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specifications",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Add API specification version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"apiSpecificationVersionId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"2.0\",\r\n  \"description\": \"Verzamelen Huisartsgegevens 2.0\",\r\n  \"apiSpecificationId\": \"{{apiSpecificationId}}\",\r\n  \"publishTime\": \"2020-09-02T00:00:00.000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 0,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"urls\": [\r\n    {\r\n      \"type\": \"FUNCTIONAL_DESIGN\",\r\n      \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens\"\r\n    },\r\n    {\r\n      \"type\": \"TECHNICAL_DESIGN\",\r\n      \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/FHIR_GP_Data\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specification-versions"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Add declaration of conformity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"apiSpecificationVersionDeclarationOfConformityId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specification-versions",
										":apiSpecificationVersionId",
										"declarations-of-conformity"
									],
									"variable": [
										{
											"key": "apiSpecificationVersionId",
											"value": "{{apiSpecificationVersionId}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "REST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId",
												"declarations-of-conformity"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "SOAP",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-S001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-S001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-S002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId",
												"declarations-of-conformity"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "GraphQL",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId",
												"declarations-of-conformity"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "OData",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId",
												"declarations-of-conformity"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "gRPC",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId",
												"declarations-of-conformity"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Other",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId",
												"declarations-of-conformity"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "4. Set API specification mainVersionId",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mainVersionId\": \"{{apiSpecificationVersionId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specifications/:apiSpecificationId",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specifications",
										":apiSpecificationId"
									],
									"variable": [
										{
											"key": "apiSpecificationId",
											"value": "{{apiSpecificationId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invite user to your organization",
					"item": [
						{
							"name": "1. Add invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"invitationId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"john.doe@nictiz.nl\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/invitations",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"organizations",
										":organizationId",
										"invitations"
									],
									"variable": [
										{
											"key": "organizationId",
											"value": "{{organizationId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Accept invitation to join an organization",
					"item": [
						{
							"name": "1. Get pending invitations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"invitationId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"    pm.expect(jsonData, \"No pending invitations found.\").not.be.empty;\r",
											"    let firstItem = jsonData[0];\r",
											"    pm.expect(firstItem).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = firstItem[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/users/me/invitations?limit=&skip=&sort=&filter=eq(status,\"PENDING\")&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"users",
										"me",
										"invitations"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": "eq(status,\"PENDING\")"
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Accept pending invitation",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/users/me/invitations/:invitationIdAction",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"users",
										"me",
										"invitations",
										":invitationIdAction"
									],
									"variable": [
										{
											"key": "invitationIdAction",
											"value": "{{invitationId}}:accept"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v1beta2",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "me",
							"item": [
								{
									"name": "invitations",
									"item": [
										{
											"name": "{invitationId}",
											"item": [
												{
													"name": "Get a user invitation by ID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/users/me/invitations/:invitationId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"users",
																"me",
																"invitations",
																":invitationId"
															],
															"variable": [
																{
																	"key": "invitationId",
																	"value": "{{invitationId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept a pending user invitation",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/users/me/invitations/:invitationIdAction",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"users",
																"me",
																"invitations",
																":invitationIdAction"
															],
															"variable": [
																{
																	"key": "invitationIdAction",
																	"value": "{{invitationId}}:accept"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Decline a pending user invitation",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/users/me/invitations/:invitationIdAction",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"users",
																"me",
																"invitations",
																":invitationIdAction"
															],
															"variable": [
																{
																	"key": "invitationIdAction",
																	"value": "{{invitationId}}:decline"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List all user invitations",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/users/me/invitations?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"users",
														"me",
														"invitations"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "memberships",
									"item": [
										{
											"name": "{membershipId}",
											"item": [
												{
													"name": "Get a user membership by ID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/users/me/memberships/:membershipId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"users",
																"me",
																"memberships",
																":membershipId"
															],
															"variable": [
																{
																	"key": "membershipId",
																	"value": "{{membershipId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete a user membership",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/users/me/memberships/:membershipId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"users",
																"me",
																"memberships",
																":membershipId"
															],
															"variable": [
																{
																	"key": "membershipId",
																	"value": "{{membershipId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List all user memberships",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/users/me/memberships?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"users",
														"me",
														"memberships"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get user information for authenticated user",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/users/me",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "organizations",
					"item": [
						{
							"name": "{organizationId}",
							"item": [
								{
									"name": "invitations",
									"item": [
										{
											"name": "{invitationId}",
											"item": [
												{
													"name": "Get an organization invitation by ID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/invitations/:invitationId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"organizations",
																":organizationId",
																"invitations",
																":invitationId"
															],
															"variable": [
																{
																	"key": "organizationId",
																	"value": "{{organizationId}}"
																},
																{
																	"key": "invitationId",
																	"value": "{{invitationId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Cancel a pending organization invitation",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/invitations/:invitationIdAction",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"organizations",
																":organizationId",
																"invitations",
																":invitationIdAction"
															],
															"variable": [
																{
																	"key": "organizationId",
																	"value": "{{organizationId}}"
																},
																{
																	"key": "invitationIdAction",
																	"value": "{{invitationId}}:cancel"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List all organization invitations",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/invitations?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"organizations",
														":organizationId",
														"invitations"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "{{organizationId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an organization invitation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const PROPERTY_NAME = \"id\";\r",
															"const VARIABLE_NAME = \"invitationId\";\r",
															"\r",
															"pm.test(\"Extract variable\", () => {\r",
															"    pm.response.to.have.status(201);\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
															"\r",
															"    let property = jsonData[PROPERTY_NAME];\r",
															"    // Set variable on environment if found, otherwise set on collection\r",
															"    if (pm.environment.has(VARIABLE_NAME)) {\r",
															"        pm.environment.set(VARIABLE_NAME, property);\r",
															"    } else {\r",
															"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"emailAddress\": \"john.doe@nictiz.nl\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/invitations",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"organizations",
														":organizationId",
														"invitations"
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "{{organizationId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "memberships",
									"item": [
										{
											"name": "{membershipId}",
											"item": [
												{
													"name": "Get an organization membership by ID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/memberships/:membershipId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"organizations",
																":organizationId",
																"memberships",
																":membershipId"
															],
															"variable": [
																{
																	"key": "organizationId",
																	"value": "{{organizationId}}"
																},
																{
																	"key": "membershipId",
																	"value": "{{membershipId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete an organization membership",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/memberships/:membershipId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"organizations",
																":organizationId",
																"memberships",
																":membershipId"
															],
															"variable": [
																{
																	"key": "organizationId",
																	"value": "{{organizationId}}"
																},
																{
																	"key": "membershipId",
																	"value": "{{membershipId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List all organization memberships",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId/memberships?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"organizations",
														":organizationId",
														"memberships"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "organizationId",
															"value": "{{organizationId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get an organization by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"organizations",
												":organizationId"
											],
											"variable": [
												{
													"key": "organizationId",
													"value": "{{organizationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an organization",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Nictiz\",\r\n  \"description\": \"Nictiz is the Dutch competence center for electronic exchange of health and care information.\",\r\n  \"website\": \"https://nictiz.nl/\",\r\n  \"githubUrl\": \"https://github.com/Nictiz\",\r\n  \"gitlabUrl\": \"https://gitlab.com/nictiz\",\r\n  \"emailAddress\": \"info@nictiz.nl\",\r\n  \"phoneNumber\": \"+31 (0)70 317 3450\",\r\n  \"address\": {\r\n    \"street\": \"Oude Middenweg\",\r\n    \"houseNumber\": 55,\r\n    \"houseNumberAddition\": \"A\",\r\n    \"addressLine2\": \"Office building Palazzo Giardino\",\r\n    \"postalCode\": \"2491 AC\",\r\n    \"city\": \"The Hague\",\r\n    \"stateOrRegion\": \"South Holland\",\r\n    \"country\": \"NL\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/organizations/:organizationId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"organizations",
												":organizationId"
											],
											"variable": [
												{
													"key": "organizationId",
													"value": "{{organizationId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all organizations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/organizations?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"organizations"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"organizationId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Nictiz\",\r\n  \"description\": \"Nictiz is the Dutch competence center for electronic exchange of health and care information.\",\r\n  \"website\": \"https://nictiz.nl/\",\r\n  \"githubUrl\": \"https://github.com/Nictiz\",\r\n  \"gitlabUrl\": \"https://gitlab.com/nictiz\",\r\n  \"emailAddress\": \"info@nictiz.nl\",\r\n  \"phoneNumber\": \"+31 (0)70 317 3450\",\r\n  \"address\": {\r\n    \"street\": \"Oude Middenweg\",\r\n    \"houseNumber\": 55,\r\n    \"houseNumberAddition\": \"A\",\r\n    \"addressLine2\": \"Office building Palazzo Giardino\",\r\n    \"postalCode\": \"2491 AC\",\r\n    \"city\": \"The Hague\",\r\n    \"stateOrRegion\": \"South Holland\",\r\n    \"country\": \"NL\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/organizations",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"organizations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "api-requirements-versions",
					"item": [
						{
							"name": "{versionName}",
							"item": [
								{
									"name": "api-requirements",
									"item": [
										{
											"name": "List all API requirements version API requirements",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions/:versionName/api-requirements?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"api-requirements-versions",
														":versionName",
														"api-requirements"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "versionName",
															"value": "{{apiRequirementsVersionName}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "All API_SPECIFICATION REST requirements",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions/:versionName/api-requirements?limit=&skip=&sort=&filter=and(any(perspectiveTypes,eq($it,\"API_SPECIFICATION\")),any(architecturalStyles,eq($it,\"REST\")))&count=",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-requirements-versions",
																":versionName",
																"api-requirements"
															],
															"query": [
																{
																	"key": "limit",
																	"value": ""
																},
																{
																	"key": "skip",
																	"value": ""
																},
																{
																	"key": "sort",
																	"value": ""
																},
																{
																	"key": "filter",
																	"value": "and(any(perspectiveTypes,eq($it,\"API_SPECIFICATION\")),any(architecturalStyles,eq($it,\"REST\")))"
																},
																{
																	"key": "count",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "versionName",
																	"value": "{{apiRequirementsVersionName}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "All API_SPECIFICATION SOAP requirements",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions/:versionName/api-requirements?limit=&skip=&sort=&filter=and(any(perspectiveTypes,eq($it,\"API_SPECIFICATION\")),any(architecturalStyles,eq($it,\"SOAP\")))&count=",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-requirements-versions",
																":versionName",
																"api-requirements"
															],
															"query": [
																{
																	"key": "limit",
																	"value": ""
																},
																{
																	"key": "skip",
																	"value": ""
																},
																{
																	"key": "sort",
																	"value": ""
																},
																{
																	"key": "filter",
																	"value": "and(any(perspectiveTypes,eq($it,\"API_SPECIFICATION\")),any(architecturalStyles,eq($it,\"SOAP\")))"
																},
																{
																	"key": "count",
																	"value": ""
																}
															],
															"variable": [
																{
																	"key": "versionName",
																	"value": "{{apiRequirementsVersionName}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get an API requirements version by name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions/:versionName",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-requirements-versions",
												":versionName"
											],
											"variable": [
												{
													"key": "versionName",
													"value": "{{apiRequirementsVersionName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an API requirements version",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"1.2.0\",\r\n  \"description\": \"This specification sets out requirements for Application Programming Interfaces (APIs) in Dutch Healthcare. It has been developed as part of the Nictiz API strategy.\",\r\n  \"url\": \"https://nictiz.github.io/api-requirements-docs/v1.2.0/\",\r\n  \"publishTime\": \"2023-07-12T10:45:30.500Z\",\r\n  \"semVer\": {\r\n    \"major\": 1,\r\n    \"minor\": 2,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions/:versionName",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-requirements-versions",
												":versionName"
											],
											"variable": [
												{
													"key": "versionName",
													"value": "{{apiRequirementsVersionName}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all API requirements versions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-requirements-versions"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an API requirements version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"name\";\r",
											"const VARIABLE_NAME = \"apiRequirementsVersionName\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"1.2.0\",\r\n  \"description\": \"This specification sets out requirements for Application Programming Interfaces (APIs) in Dutch Healthcare. It has been developed as part of the Nictiz API strategy.\",\r\n  \"url\": \"https://nictiz.github.io/api-requirements-docs/v1.2.0/\",\r\n  \"publishTime\": \"2023-07-12T10:45:30.500Z\",\r\n  \"semVer\": {\r\n    \"major\": 1,\r\n    \"minor\": 2,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"apiRequirements\": [\r\n    {\r\n      \"code\": \"SD001\",\r\n      \"description\": \"API documentation MUST be publicly and freely available\",\r\n      \"explanation\": \"This is an example text.\",\r\n      \"url\": \"https://nictiz.github.io/api-requirements-docs/v1.2.0/api-specification-and-documentation/#sd001-api-documentation-must-be-publicly-and-freely-available\",\r\n      \"requirementLevel\": \"MUST\",\r\n      \"score\": 1,\r\n      \"category\": \"API_SPECIFICATION_AND_DOCUMENTATION\",\r\n      \"roles\": [\r\n        \"API_SPECIFIER\"\r\n      ],\r\n      \"perspectiveTypes\": [\r\n        \"API_SPECIFICATION\"\r\n      ],\r\n      \"architecturalStyles\": [\r\n        \"REST\",\r\n        \"SOAP\",\r\n        \"GRAPHQL\",\r\n        \"ODATA\",\r\n        \"GRPC\",\r\n        \"OTHER\"\r\n      ],\r\n      \"standardizationLevels\": [\r\n        \"OPEN_API\",\r\n        \"TECHNICALLY_STANDARDIZED_API\",\r\n        \"FULLY_STANDARDIZED_API\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-requirements-versions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-requirements-versions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "api-specifications",
					"item": [
						{
							"name": "{apiSpecificationId}",
							"item": [
								{
									"name": "Get an API specification by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specifications/:apiSpecificationId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specifications",
												":apiSpecificationId"
											],
											"variable": [
												{
													"key": "apiSpecificationId",
													"value": "{{apiSpecificationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an API specification",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Verzamelen Huisartsgegevens\",\r\n  \"description\": \"Het verzamelen van huisartsgegevens: je medische dossier bij je huisarts.\",\r\n  \"mainVersionId\": \"{{apiSpecificationVersionId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specifications/:apiSpecificationId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specifications",
												":apiSpecificationId"
											],
											"variable": [
												{
													"key": "apiSpecificationId",
													"value": "{{apiSpecificationId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all API specifications",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specifications?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specifications"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an API specification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"apiSpecificationId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Verzamelen Huisartsgegevens\",\r\n  \"description\": \"Het verzamelen van huisartsgegevens: je medische dossier bij je huisarts.\",\r\n  \"organizationId\": \"{{organizationId}}\",\r\n  \"architecturalStyle\": \"REST\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specifications",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "api-specification-versions",
					"item": [
						{
							"name": "{apiSpecificationVersionId}",
							"item": [
								{
									"name": "urls",
									"item": [
										{
											"name": "{urlId}",
											"item": [
												{
													"name": "Get an API specification version URL by ID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/urls/:urlId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"urls",
																":urlId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "urlId",
																	"value": "{{apiSpecificationVersionUrlId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Update an API specification version URL",
													"request": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"type\": \"FUNCTIONAL_DESIGN\",\r\n  \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/urls/:urlId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"urls",
																":urlId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "urlId",
																	"value": "{{apiSpecificationVersionUrlId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete an API specification version URL",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/urls/:urlId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"urls",
																":urlId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "urlId",
																	"value": "{{apiSpecificationVersionUrlId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List all API specification version URLs",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/urls?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"api-specification-versions",
														":apiSpecificationVersionId",
														"urls"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "apiSpecificationVersionId",
															"value": "{{apiSpecificationVersionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an API specification version URL",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const PROPERTY_NAME = \"id\";\r",
															"const VARIABLE_NAME = \"apiSpecificationVersionUrlId\";\r",
															"\r",
															"pm.test(\"Extract variable\", () => {\r",
															"    pm.response.to.have.status(201);\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
															"\r",
															"    let property = jsonData[PROPERTY_NAME];\r",
															"    // Set variable on environment if found, otherwise set on collection\r",
															"    if (pm.environment.has(VARIABLE_NAME)) {\r",
															"        pm.environment.set(VARIABLE_NAME, property);\r",
															"    } else {\r",
															"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"type\": \"FUNCTIONAL_DESIGN\",\r\n  \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/urls",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"api-specification-versions",
														":apiSpecificationVersionId",
														"urls"
													],
													"variable": [
														{
															"key": "apiSpecificationVersionId",
															"value": "{{apiSpecificationVersionId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "declarations-of-conformity",
									"item": [
										{
											"name": "{declarationOfConformityId}",
											"item": [
												{
													"name": "Get an API specification version declaration of conformity by ID",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity/:declarationOfConformityId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity",
																":declarationOfConformityId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "declarationOfConformityId",
																	"value": "{{apiSpecificationVersionDeclarationOfConformityId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "List all API specification version declarations of conformity",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity?limit=&skip=&sort=&filter=&count=",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"api-specification-versions",
														":apiSpecificationVersionId",
														"declarations-of-conformity"
													],
													"query": [
														{
															"key": "limit",
															"value": ""
														},
														{
															"key": "skip",
															"value": ""
														},
														{
															"key": "sort",
															"value": ""
														},
														{
															"key": "filter",
															"value": ""
														},
														{
															"key": "count",
															"value": ""
														}
													],
													"variable": [
														{
															"key": "apiSpecificationVersionId",
															"value": "{{apiSpecificationVersionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an API specification version declaration of conformity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const PROPERTY_NAME = \"id\";\r",
															"const VARIABLE_NAME = \"apiSpecificationVersionDeclarationOfConformityId\";\r",
															"\r",
															"pm.test(\"Extract variable\", () => {\r",
															"    pm.response.to.have.status(201);\r",
															"    let jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
															"\r",
															"    let property = jsonData[PROPERTY_NAME];\r",
															"    // Set variable on environment if found, otherwise set on collection\r",
															"    if (pm.environment.has(VARIABLE_NAME)) {\r",
															"        pm.environment.set(VARIABLE_NAME, property);\r",
															"    } else {\r",
															"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
													"host": [
														"{{baseApiUrl}}"
													],
													"path": [
														"v1beta2",
														"api-specification-versions",
														":apiSpecificationVersionId",
														"declarations-of-conformity"
													],
													"variable": [
														{
															"key": "apiSpecificationVersionId",
															"value": "{{apiSpecificationVersionId}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "REST",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-R003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "SOAP",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR-S001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-S001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC-S002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "GraphQL",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "OData",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "gRPC",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Other",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"requirementsVersion\": \"1.2.0\",\r\n  \"requirements\": {\r\n    \"SD001\": {\r\n      \"conformityType\": \"CONFORMANT\",\r\n      \"remarks\": \"Provide evidence supporting compliance claims with standards, specifications, guidelines, practices, policies, or laws. Evidence may include URLs to official third-party validation reports or audits.\"\r\n    },\r\n    \"SD001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\",\r\n      \"remarks\": \"For example, explain why the resource does not meet this requirement.\"\r\n    },\r\n    \"SD001.002\": {\r\n      \"conformityType\": \"NOT_APPLICABLE\",\r\n      \"remarks\": \"For example, explain why this requirement does not apply to the resource.\"\r\n    },\r\n    \"SD001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.015\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.016\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD001.017\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD004.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD005.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD009.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD010\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD011\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD013\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SD014\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DI001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM001.004\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM002.003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"LM008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"DR012\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC006\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC007\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC008\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"SC009\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.001\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003.002\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    },\r\n    \"IS003\": {\r\n      \"conformityType\": \"NOT_CONFORMANT\"\r\n    }\r\n  }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/declarations-of-conformity",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"declarations-of-conformity"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																}
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "communication-standard-versions",
									"item": [
										{
											"name": "{communicationStandardVersionId}",
											"item": [
												{
													"name": "Set a communication standard version for an API specification version",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/communication-standard-versions/:communicationStandardVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"communication-standard-versions",
																":communicationStandardVersionId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "communicationStandardVersionId",
																	"value": "{{communicationStandardVersionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete a communication standard version from an API specification version",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/communication-standard-versions/:communicationStandardVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"communication-standard-versions",
																":communicationStandardVersionId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "communicationStandardVersionId",
																	"value": "{{communicationStandardVersionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "information-standard-versions",
									"item": [
										{
											"name": "{informationStandardVersionId}",
											"item": [
												{
													"name": "Set an information standard version for an API specification version",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/information-standard-versions/:informationStandardVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"information-standard-versions",
																":informationStandardVersionId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "informationStandardVersionId",
																	"value": "{{informationStandardVersionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete an information standard version from an API specification version",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/information-standard-versions/:informationStandardVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"information-standard-versions",
																":informationStandardVersionId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "informationStandardVersionId",
																	"value": "{{informationStandardVersionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "trust-framework-versions",
									"item": [
										{
											"name": "{trustFrameworkVersionId}",
											"item": [
												{
													"name": "Set a trust framework version for an API specification version",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/trust-framework-versions/:trustFrameworkVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"trust-framework-versions",
																":trustFrameworkVersionId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "trustFrameworkVersionId",
																	"value": "{{trustFrameworkVersionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete a trust framework version from an API specification version",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId/trust-framework-versions/:trustFrameworkVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"api-specification-versions",
																":apiSpecificationVersionId",
																"trust-framework-versions",
																":trustFrameworkVersionId"
															],
															"variable": [
																{
																	"key": "apiSpecificationVersionId",
																	"value": "{{apiSpecificationVersionId}}"
																},
																{
																	"key": "trustFrameworkVersionId",
																	"value": "{{trustFrameworkVersionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get an API specification version by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an API specification version",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"2.0\",\r\n  \"description\": \"Verzamelen Huisartsgegevens 2.0\",\r\n  \"publishTime\": \"2020-09-02T00:00:00.000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 0,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions/:apiSpecificationVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"api-specification-versions",
												":apiSpecificationVersionId"
											],
											"variable": [
												{
													"key": "apiSpecificationVersionId",
													"value": "{{apiSpecificationVersionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all API specification versions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specification-versions"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an API specification version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"apiSpecificationVersionId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"2.0\",\r\n  \"description\": \"Verzamelen Huisartsgegevens 2.0\",\r\n  \"apiSpecificationId\": \"{{apiSpecificationId}}\",\r\n  \"publishTime\": \"2020-09-02T00:00:00.000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 0,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"urls\": [\r\n    {\r\n      \"type\": \"FUNCTIONAL_DESIGN\",\r\n      \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens\"\r\n    }\r\n  ],\r\n  \"communicationStandardVersions\": [\r\n    {\r\n      \"id\": \"{{communicationStandardVersionId}}\"\r\n    }\r\n  ],\r\n  \"informationStandardVersions\": [\r\n    {\r\n      \"id\": \"{{informationStandardVersionId}}\"\r\n    }\r\n  ],\r\n  \"trustFrameworkVersions\": [\r\n    {\r\n      \"id\": \"{{trustFrameworkVersionId}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/api-specification-versions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"api-specification-versions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "communication-standards",
					"item": [
						{
							"name": "{communicationStandardId}",
							"item": [
								{
									"name": "Get a communication standard by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/communication-standards/:communicationStandardId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"communication-standards",
												":communicationStandardId"
											],
											"variable": [
												{
													"key": "communicationStandardId",
													"value": "{{communicationStandardId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a communication standard",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"FHIR\",\r\n  \"description\": \"FHIR (Fast Health Interoperability Resources) is an HL7 specification for Healthcare Interoperability.\",\r\n  \"mainVersionId\": \"{{communicationStandardVersionId}}\",\r\n  \"url\": \"https://hl7.org/fhir/\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/communication-standards/:communicationStandardId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"communication-standards",
												":communicationStandardId"
											],
											"variable": [
												{
													"key": "communicationStandardId",
													"value": "{{communicationStandardId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all communication standards",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/communication-standards?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"communication-standards"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a communication standard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"communicationStandardId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"FHIR\",\r\n  \"description\": \"FHIR (Fast Health Interoperability Resources) is an HL7 specification for Healthcare Interoperability.\",\r\n  \"organizationId\": \"{{organizationId}}\",\r\n  \"url\": \"https://hl7.org/fhir/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/communication-standards",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"communication-standards"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "communication-standard-versions",
					"item": [
						{
							"name": "{communicationStandardVersionId}",
							"item": [
								{
									"name": "Get a communication standard version by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/communication-standard-versions/:communicationStandardVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"communication-standard-versions",
												":communicationStandardVersionId"
											],
											"variable": [
												{
													"key": "communicationStandardVersionId",
													"value": "{{communicationStandardVersionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a communication standard version",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"R5\",\r\n  \"description\": \"FHIR Specification 5.0.0\",\r\n  \"publishTime\": \"2023-03-26T12:00:00.0000000Z\",\r\n  \"semVer\": {\r\n    \"major\": 5,\r\n    \"minor\": 0,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"url\": \"https://hl7.org/fhir/R5/\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/communication-standard-versions/:communicationStandardVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"communication-standard-versions",
												":communicationStandardVersionId"
											],
											"variable": [
												{
													"key": "communicationStandardVersionId",
													"value": "{{communicationStandardVersionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all communication standard versions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/communication-standard-versions?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"communication-standard-versions"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a communication standard version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"communicationStandardVersionId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"R5\",\r\n  \"description\": \"FHIR Specification 5.0.0\",\r\n  \"communicationStandardId\": \"{{communicationStandardId}}\",\r\n  \"publishTime\": \"2023-03-26T12:00:00.0000000Z\",\r\n  \"semVer\": {\r\n    \"major\": 5,\r\n    \"minor\": 0,\r\n    \"patch\": 0\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"url\": \"https://hl7.org/fhir/R5/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/communication-standard-versions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"communication-standard-versions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "information-standards",
					"item": [
						{
							"name": "{informationStandardId}",
							"item": [
								{
									"name": "Get an information standard by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/information-standards/:informationStandardId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"information-standards",
												":informationStandardId"
											],
											"variable": [
												{
													"key": "informationStandardId",
													"value": "{{informationStandardId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an information standard",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"MedMij Huisartsgegevens\",\r\n  \"description\": \"Het verzamelen van huisartsgegevens: je medische dossier bij je huisarts.\",\r\n  \"mainVersionId\": \"{{informationStandardVersionId}}\",\r\n  \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:Landingspagina_MedMij\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/information-standards/:informationStandardId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"information-standards",
												":informationStandardId"
											],
											"variable": [
												{
													"key": "informationStandardId",
													"value": "{{informationStandardId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all information standards",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/information-standards?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"information-standards"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an information standard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"informationStandardId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"MedMij Huisartsgegevens\",\r\n  \"description\": \"Het verzamelen van huisartsgegevens: je medische dossier bij je huisarts.\",\r\n  \"organizationId\": \"{{organizationId}}\",\r\n  \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:Landingspagina_MedMij\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/information-standards",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"information-standards"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "information-standard-versions",
					"item": [
						{
							"name": "{informationStandardVersionId}",
							"item": [
								{
									"name": "communication-standard-versions",
									"item": [
										{
											"name": "{communicationStandardVersionId}",
											"item": [
												{
													"name": "Set a communication standard version for an information standard version",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions/:informationStandardVersionId/communication-standard-versions/:communicationStandardVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"information-standard-versions",
																":informationStandardVersionId",
																"communication-standard-versions",
																":communicationStandardVersionId"
															],
															"variable": [
																{
																	"key": "informationStandardVersionId",
																	"value": "{{informationStandardVersionId}}"
																},
																{
																	"key": "communicationStandardVersionId",
																	"value": "{{communicationStandardVersionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete a communication standard version from an information standard version",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions/:informationStandardVersionId/communication-standard-versions/:communicationStandardVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"information-standard-versions",
																":informationStandardVersionId",
																"communication-standard-versions",
																":communicationStandardVersionId"
															],
															"variable": [
																{
																	"key": "informationStandardVersionId",
																	"value": "{{informationStandardVersionId}}"
																},
																{
																	"key": "communicationStandardVersionId",
																	"value": "{{communicationStandardVersionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "trust-framework-versions",
									"item": [
										{
											"name": "{trustFrameworkVersionId}",
											"item": [
												{
													"name": "Set a trust framework version for an information standard version",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions/:informationStandardVersionId/trust-framework-versions/:trustFrameworkVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"information-standard-versions",
																":informationStandardVersionId",
																"trust-framework-versions",
																":trustFrameworkVersionId"
															],
															"variable": [
																{
																	"key": "informationStandardVersionId",
																	"value": "{{informationStandardVersionId}}"
																},
																{
																	"key": "trustFrameworkVersionId",
																	"value": "{{trustFrameworkVersionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete a trust framework version from an information standard version",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions/:informationStandardVersionId/trust-framework-versions/:trustFrameworkVersionId",
															"host": [
																"{{baseApiUrl}}"
															],
															"path": [
																"v1beta2",
																"information-standard-versions",
																":informationStandardVersionId",
																"trust-framework-versions",
																":trustFrameworkVersionId"
															],
															"variable": [
																{
																	"key": "informationStandardVersionId",
																	"value": "{{informationStandardVersionId}}"
																},
																{
																	"key": "trustFrameworkVersionId",
																	"value": "{{trustFrameworkVersionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Get an information standard version by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions/:informationStandardVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"information-standard-versions",
												":informationStandardVersionId"
											],
											"variable": [
												{
													"key": "informationStandardVersionId",
													"value": "{{informationStandardVersionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update an information standard version",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"2.0.41\",\r\n  \"description\": \"Drie aanpassingen in het MedMij Huisartsgegevens kwalificatiemateriaal zodat het overeenkomt met het kwalificatiescript.\",\r\n  \"publishTime\": \"2024-11-20T12:00:00.0000000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 0,\r\n    \"patch\": 41\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens\",\r\n  \"careTypes\": [\r\n    \"GENERAL_PRACTITIONERS\"\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions/:informationStandardVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"information-standard-versions",
												":informationStandardVersionId"
											],
											"variable": [
												{
													"key": "informationStandardVersionId",
													"value": "{{informationStandardVersionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all information standard versions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"information-standard-versions"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add an information standard version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"informationStandardVersionId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"2.0.41\",\r\n  \"description\": \"Drie aanpassingen in het MedMij Huisartsgegevens kwalificatiemateriaal zodat het overeenkomt met het kwalificatiescript.\",\r\n  \"informationStandardId\": \"{{informationStandardId}}\",\r\n  \"publishTime\": \"2024-11-20T12:00:00.0000000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 0,\r\n    \"patch\": 41\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"url\": \"https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens\",\r\n  \"careTypes\": [\r\n    \"GENERAL_PRACTITIONERS\"\r\n  ],\r\n  \"communicationStandardVersions\": [\r\n    {\r\n      \"id\": \"{{communicationStandardVersionId}}\"\r\n    }\r\n  ],\r\n  \"trustFrameworkVersions\": [\r\n    {\r\n      \"id\": \"{{trustFrameworkVersionId}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/information-standard-versions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"information-standard-versions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "trust-frameworks",
					"item": [
						{
							"name": "{trustFrameworkId}",
							"item": [
								{
									"name": "Get a trust framework by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/trust-frameworks/:trustFrameworkId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"trust-frameworks",
												":trustFrameworkId"
											],
											"variable": [
												{
													"key": "trustFrameworkId",
													"value": "{{trustFrameworkId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a trust framework",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"MedMij Afsprakenstelsel\",\r\n  \"description\": \"Het MedMij Afsprakenstelsel draagt eraan bij dat persoonsgebonden, gevoelige en vertrouwelijke gezondheidsgegevens op een veilige en gebruiksvriendelijke wijze uitgewisseld kunnen worden tussen persoonlijke gezondheidsomgevingen en aanbieders.\",\r\n  \"mainVersionId\": \"{{trustFrameworkVersionId}}\",\r\n  \"url\": \"https://afsprakenstelsel.medmij.nl/\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/trust-frameworks/:trustFrameworkId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"trust-frameworks",
												":trustFrameworkId"
											],
											"variable": [
												{
													"key": "trustFrameworkId",
													"value": "{{trustFrameworkId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all trust frameworks",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/trust-frameworks?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"trust-frameworks"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a trust framework",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"trustFrameworkId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"MedMij Afsprakenstelsel\",\r\n  \"description\": \"Het MedMij Afsprakenstelsel draagt eraan bij dat persoonsgebonden, gevoelige en vertrouwelijke gezondheidsgegevens op een veilige en gebruiksvriendelijke wijze uitgewisseld kunnen worden tussen persoonlijke gezondheidsomgevingen en aanbieders.\",\r\n  \"organizationId\": \"{{organizationId}}\",\r\n  \"url\": \"https://afsprakenstelsel.medmij.nl/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/trust-frameworks",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"trust-frameworks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "trust-framework-versions",
					"item": [
						{
							"name": "{trustFrameworkVersionId}",
							"item": [
								{
									"name": "Get a trust framework version by ID",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/trust-framework-versions/:trustFrameworkVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"trust-framework-versions",
												":trustFrameworkVersionId"
											],
											"variable": [
												{
													"key": "trustFrameworkVersionId",
													"value": "{{trustFrameworkVersionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update a trust framework version",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"2.2.2 Verplicht\",\r\n  \"description\": \"Dit is de huidige verplichte versie die door alle deelnemers moet worden ondersteund.\",\r\n  \"publishTime\": \"2024-09-10T12:00:00.0000000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 2,\r\n    \"patch\": 2\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"url\": \"https://afsprakenstelsel.medmij.nl/asverplicht/mmverplicht/\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseApiUrl}}/v1beta2/trust-framework-versions/:trustFrameworkVersionId",
											"host": [
												"{{baseApiUrl}}"
											],
											"path": [
												"v1beta2",
												"trust-framework-versions",
												":trustFrameworkVersionId"
											],
											"variable": [
												{
													"key": "trustFrameworkVersionId",
													"value": "{{trustFrameworkVersionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List all trust framework versions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/trust-framework-versions?limit=&skip=&sort=&filter=&count=",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"trust-framework-versions"
									],
									"query": [
										{
											"key": "limit",
											"value": ""
										},
										{
											"key": "skip",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										},
										{
											"key": "filter",
											"value": ""
										},
										{
											"key": "count",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a trust framework version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const PROPERTY_NAME = \"id\";\r",
											"const VARIABLE_NAME = \"trustFrameworkVersionId\";\r",
											"\r",
											"pm.test(\"Extract variable\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(PROPERTY_NAME);\r",
											"\r",
											"    let property = jsonData[PROPERTY_NAME];\r",
											"    // Set variable on environment if found, otherwise set on collection\r",
											"    if (pm.environment.has(VARIABLE_NAME)) {\r",
											"        pm.environment.set(VARIABLE_NAME, property);\r",
											"    } else {\r",
											"        pm.collectionVariables.set(VARIABLE_NAME, property);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"2.2.2 Verplicht\",\r\n  \"description\": \"Dit is de huidige verplichte versie die door alle deelnemers moet worden ondersteund.\",\r\n  \"trustFrameworkId\": \"{{trustFrameworkId}}\",\r\n  \"publishTime\": \"2024-09-10T12:00:00.0000000Z\",\r\n  \"semVer\": {\r\n    \"major\": 2,\r\n    \"minor\": 2,\r\n    \"patch\": 2\r\n  },\r\n  \"lifecycleState\": \"PUBLISHED\",\r\n  \"url\": \"https://afsprakenstelsel.medmij.nl/asverplicht/mmverplicht/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1beta2/trust-framework-versions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1beta2",
										"trust-framework-versions"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "openid offline_access users:read users:write organizations:read organizations:write api-requirements-versions:read api-requirements-versions:write api-specifications:read api-specifications:write communication-standards:read communication-standards:write information-standards:read information-standards:write trust-frameworks:read trust-frameworks:write",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "redirect_uri",
				"value": "https://oauth.pstmn.io/v1/callback",
				"type": "string"
			},
			{
				"key": "refreshTokenUrl",
				"value": "{{baseAuthUrl}}/realms/zorgapis/protocol/openid-connect/token",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{baseAuthUrl}}/realms/zorgapis/protocol/openid-connect/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{baseAuthUrl}}/realms/zorgapis/protocol/openid-connect/auth",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{clientSecret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{clientId}}",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseAuthUrl",
			"value": "https://auth.zorgapis.nl"
		},
		{
			"key": "clientId",
			"value": "zorgapis.postman"
		},
		{
			"key": "clientSecret",
			"value": ""
		},
		{
			"key": "baseApiUrl",
			"value": "https://api.zorgapis.nl"
		},
		{
			"key": "organizationId",
			"value": ""
		},
		{
			"key": "invitationId",
			"value": ""
		},
		{
			"key": "membershipId",
			"value": ""
		},
		{
			"key": "apiRequirementsVersionName",
			"value": "1.2.0"
		},
		{
			"key": "apiSpecificationId",
			"value": ""
		},
		{
			"key": "apiSpecificationVersionId",
			"value": ""
		},
		{
			"key": "apiSpecificationVersionUrlId",
			"value": ""
		},
		{
			"key": "apiSpecificationVersionDeclarationOfConformityId",
			"value": ""
		},
		{
			"key": "communicationStandardId",
			"value": ""
		},
		{
			"key": "communicationStandardVersionId",
			"value": ""
		},
		{
			"key": "informationStandardId",
			"value": ""
		},
		{
			"key": "informationStandardVersionId",
			"value": ""
		},
		{
			"key": "trustFrameworkId",
			"value": ""
		},
		{
			"key": "trustFrameworkVersionId",
			"value": ""
		}
	]
}